#!/bin/bash
#

######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/resource.d/heartbeat}
. ${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs
LC_ALL="C"
LANG="C"

[ "$HOME" = '' ] && export HOME=${OCF_ROOT}

#######################################################################
# Configuration:

#######################################################################

rebarred_meta_data() {
    cat <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="rebarred" version="0.2">
  <version>0.2</version>
  <longdesc lang="en">Resource agent for rebar generated erlang release</longdesc>
  <shortdesc lang="en">Resource agent for rebar generated erlang release</shortdesc>
  <parameters>
    <parameter name="uname" required="1">
      <longdesc lang="en">User name the resource agent should run the resource under</longdesc>
      <shortdesc lang="en">User name</shortdesc>
      <content type="string" default=""/>
    </parameter>

    <parameter name="ctl" required="1">
      <longdesc lang="en">Path to resource script</longdesc>
      <shortdesc lang="en">Path to resource script</shortdesc>
      <content type="string" default=""/>
    </parameter>

    <parameter name="workingDir" required="1">
      <longdesc lang="en">Working directory for the resource script</longdesc>
      <shortdesc lang="en">Working directory for the resource script</shortdesc>
      <content type="string" default=""/>
    </parameter>

    <parameter name="envScript" required="0">
      <longdesc lang="en">Environment script to run before start</longdesc>
      <shortdesc lang="en">Environment script</shortdesc>
      <content type="string" default=""/>
    </parameter>
  </parameters>

  <actions>
    <action name="start" timeout="30"/>
    <action name="stop" timeout="60"/>
    <action name="monitor" timeout="20" interval="30" depth="0"/>
    <action name="status" timeout="20"/>
  </actions>
</resource-agent>
EOF
}

#######################################################################

rebarred_usage() {
    cat <<END
usage: $0 {start|stop|status|monitor|meta-data|usage}
END
}

rebarred_start() {
    rebarred_status
    if [ $? = $OCF_SUCCESS ]; then
        ocf_log info 'rebarred_start: Attempting to start an already started resource'
        return $OCF_SUCCESS
    fi

    if [ -f "${OCF_RESKEY_envScript}" ]; then
        . $OCF_RESKEY_envScript
    fi

    ocf_log info "rebarred_start: Testing $OCF_RESKEY_ctl x-attribute"
    test -x $OCF_RESKEY_ctl || return $OCF_ERR_INSTALLED

    # TODO: not sure it's really needed, but let stick with it for a while
    ocf_log info "rebarred_start: Changing directory to $OCF_RESKEY_workingDir"
    cd $OCF_RESKEY_workingDir || return $OCF_ERR_GENERIC

    # TODO: better to use parameters and don't hardcode
    ocf_log info "rebarred_start: Setting open-fds limit to 10240"
    ulimit -n 10240 -c unlimited

    ocf_log info "rebarred_start: Starting up $OCF_RESKEY_ctl"
    su -c "$OCF_RESKEY_ctl start" - $OCF_RESKEY_uname
    sleep 3;

    ocf_log info "rebarred_start: About to ping $OCF_RESKEY_ctl"
    PONG=$(su -c "$OCF_RESKEY_ctl ping" - $OCF_RESKEY_uname)
    ocf_log info "rebarred_start: $OCF_RESKEY_ctl ping -> '$PONG'"

    return $OCF_SUCCESS
}

rebarred_stop() {
    ocf_log info "rebarred_stop: Issuing STOP"

    # determine erlang node's pid by its cookie stored in vm.args
    # only works for /opt/SVC/etc/vm.args paths
    #CRITERION=$(cat $(dirname $(dirname $OCF_RESKEY_ctl) )/etc/vm.args| grep setcookie | awk '{print $2}')
    # now works for /opt/SVC/{etc,release/1}/vm.args and many more
    CRITERION=$(cat $(find $(dirname $(dirname $OCF_RESKEY_ctl))/ -iname vm.args | head -1) | grep setcookie | awk '{print $2}')
    BEAM_PID=$(ps ax | grep beam | grep $CRITERION | awk '{print $1}')

    su $OCF_RESKEY_uname -c "$OCF_RESKEY_ctl stop"

    for (( i=0; i < 10; i++ )); do
        ocf_log info "rebarred_stop: Waiting till beam[$BEAM_PID] stops [$i]"
        sleep 1
        kill -0 $BEAM_PID 2> /dev/null
        if [ $? != 0 ]; then
            ocf_log info "rebarred_stop: Resource stopped gracefully"
            return $OCF_SUCCESS
        fi
    done

    ocf_log warn "rebarred_stop: Resource did not stop gracefully"
    ocf_log_warn "rebarred_stop: Killing beam.smp[$BEAM_PID] process with cookie '${CRITERION}' brutally"

    # TODO: add killSignal parameter
    # should generate both erlang and core dumps
    kill -USR1 $BEAM_PID
    while kill -0 $BEAM_PID; do
        ocf_log warn "rebarred_stop: Waiting for $CRITERION/$BEAM_PID"
        sleep 1
    done
    ocf_log warn "rebarred_stop: beam.smp[$BEAM_PID] killed successfully"
    return $OCF_SUCCESS
}

rebarred_monitor() {
    PONG=$(su -c "$OCF_RESKEY_ctl ping" - $OCF_RESKEY_uname)
	ocf_log info "rebarred_monitor: $OCF_RESKEY_ctl ping -> '$PONG'"
    [ "$PONG" == 'pong' ] && return $OCF_SUCCESS || return $OCF_NOT_RUNNING
}

rebarred_status() {
    PONG=$(su -c "$OCF_RESKEY_ctl ping" - $OCF_RESKEY_uname)
	ocf_log info "rebarred_status: $OCF_RESKEY_ctl ping -> '$PONG'"
    [ "$PONG" == 'pong' ] && return $OCF_SUCCESS || return $OCF_NOT_RUNNING
}

case $1 in
    meta-data)
        rebarred_meta_data
        exit $OCF_SUCCESS
        ;;
    status)
        rebarred_status
        STATUS=$?
        exit $STATUS
        ;;
    monitor)
        rebarred_monitor
        STATUS=$?
        exit $STATUS
        ;;
    demote)
        rebarred_stop
        exit $?
        ;;
    promote)
        rebarred_start
        exit $?
        ;;
    notify)
        exit $OCF_SUCCESS
        ;;
    validate-all)
        exit $OCF_SUCCESS
        ;;
    usage|help)
        rebarred_usage
        exit $OCF_SUCCESS
        ;;
esac

case $__OCF_ACTION in
    start)
        rebarred_start
        ;;
    stop)
        rebarred_stop
        ;;
    *)
        rebarred_usage
        exit $OCF_ERR_UNIMPLEMENTED
        ;;
esac

rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc
